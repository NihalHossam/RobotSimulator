// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package main.java.softdesign;

/************************************************************/
/*MessageFactory class represents Factory design pattern and returns to the robots the message of the specified type.
 * Robots can use the message to fill it in with the necessary information and after send it to the Central Station.
 * If the parameter provided is "MAP", MessageFactory returns an empty MapMessage.
 * If the parameter provided is "BOX", MessageFactory returns an empty BoxMessage. 
 * If the parameter provided is "ERROR", MessageFactory returns an empty ErrorMessage.
 * Otherwise, null is returned.
 * MessageFactory class is a singleton, namely, only a single instance of the class is used during the run-time
 */
public class MessageFactory {
	/*single object of the MessageFactiry class*/
	private static MessageFactory instance = new MessageFactory();

	/*Constructor for the class MessageFactory*/
	private MessageFactory() {}

	/*Retrieving the singleton instance of the MessageFactory class*/
	public static MessageFactory getInstance() {
		return instance;
	}

	/*to get the Message object of the type specified in the parameter messageType*/
	public Message getMessage(String messageType){
		if (messageType == null){
			return null;
		}
		if(messageType.equalsIgnoreCase("MAP")){
			return new MapMessage();
		}
		else if(messageType.equalsIgnoreCase("BOX")){
			return new BoxMessage();
		}
		else if(messageType.equalsIgnoreCase("ERROR")){
			return new ErrorMessage();
		}
		
		return null;		
	}
};
