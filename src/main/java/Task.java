// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package main.java.softdesign;

import java.awt.Color;
import java.util.ArrayList;

/*This class represents a task which is relevant for all robots, namely, the color of the 
 * target boxes. Robots have to search for boxes of at least one and indefinitely many colors.
 * If the task state changes, robots are notified about it.
 * In the beginning of the mission state is set to START, robots can retrieve the color of target boxes
 * and start exploring the environment.
 * If task state changes to FAILED, STOPPED or COMPLETED, robots cease searching.
 * */
public class Task implements Subject {
	/*list specifying the color of the target boxes*/
	private Color boxColor;
	
	/*list of observers which are attached to the subject to listen to notifications*/
	private ArrayList<Observer> observers;
	
	/*state of the task, possible values are START, FAILED, STOPPED, COMPLETED*/
	private TaskStatus taskStatus;

	/*to retrieve the current state of the task*/
	public TaskStatus getTaskStatus() {
		return taskStatus;
	}

	/*constructor for the Task class*/
	public Task(Color color) {
		observers = new ArrayList<Observer>();
		this.boxColor = color;	
	}

	/*to change the state of the task and broadcast the change to the attached observers*/
	public void setTaskStatus(TaskStatus taskStatus) {
		this.taskStatus = taskStatus;
		this.notifyAllObservers();
		System.out.println("New status is " + this.taskStatus.toString());
	}

	/*to add new observer to the list of observers in order to be able
	 * to receive notifications about changes from the Subject*/
	public void attach(Observer observer) {
		this.observers.add(observer);
	}

	/*to remove an observer from the list of observers*/
	public void detach(Observer observer) {
		this.observers.remove(observer);
	}

	/*to notify all attached observers about changes in the status of the task*/
	public void notifyAllObservers() {
		for(Observer observer : this.observers){
			observer.update();
		}
	}

	/*to retrieve the color of the target box; method can be called by robots */
	public Color getBoxColor() {	
		return boxColor;
	}

	/*to set the color of the target box*/
	public void setBoxColor(Color color) {
			this.boxColor = color;
			this.notifyAllObservers();
	}
};
